{"remainingRequest":"/Users/noisemachines/dev/pixel-matrix/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/noisemachines/dev/pixel-matrix/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/noisemachines/dev/pixel-matrix/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/noisemachines/dev/pixel-matrix/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx","dependencies":[{"path":"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx","mtime":1547760359547},{"path":"/Users/noisemachines/dev/pixel-matrix/node_modules/cache-loader/dist/cjs.js","mtime":1547744876783},{"path":"/Users/noisemachines/dev/pixel-matrix/node_modules/babel-loader/lib/index.js","mtime":1547744876677}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport PixelMatrix, { toRgba } from '../../built/PixelMatrix';\nimport kawasePath from '../kawase.jpg';\n\nvar loadPixelMatrixFromPath =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(imagePath) {\n    var image, canvas, context;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return loadImage(imagePath);\n\n          case 2:\n            image = _context.sent;\n            // Create a canvas element\n            canvas = document.createElement('canvas');\n            canvas.width = image.width;\n            canvas.height = image.height; // Draw the image to the canvas\n\n            context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0); // Instantiate a PixelMatrix from the canvas\n\n            return _context.abrupt(\"return\", PixelMatrix.fromCanvas(canvas));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function loadPixelMatrixFromPath(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar width = 50;\nvar height = 50;\n\nvar start =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(canvas) {\n    var colorPalette, pixelMatrix, drawRandomColorAtPoint, draw;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (canvas) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            _context2.next = 4;\n            return loadPixelMatrixFromPath(kawasePath);\n\n          case 4:\n            colorPalette = _context2.sent;\n            pixelMatrix = new PixelMatrix(width, height);\n\n            drawRandomColorAtPoint = function drawRandomColorAtPoint(point) {\n              var pixel = colorPalette.getRandomPixel();\n              pixelMatrix.set(point, pixel);\n              pixelMatrix.putPixels(canvas);\n            };\n\n            pixelMatrix.forEach(function (pixel, point) {\n              return drawRandomColorAtPoint(point);\n            });\n\n            draw = function draw() {\n              var point = pixelMatrix.getRandomPoint();\n              drawRandomColorAtPoint(point);\n            };\n\n            setInterval(draw, 10);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function start(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar _default = function _default() {\n  // return (\n  //   <canvas\n  //     style={{ width: '50%', height: '50%', imageRendering: 'pixelated' }}\n  //     width={width}\n  //     height={height}\n  //     ref={start}\n  //   />\n  // )\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \"Hi\");\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(loadPixelMatrixFromPath, \"loadPixelMatrixFromPath\", \"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx\");\n  reactHotLoader.register(width, \"width\", \"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx\");\n  reactHotLoader.register(height, \"height\", \"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx\");\n  reactHotLoader.register(start, \"start\", \"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx\");\n  reactHotLoader.register(_default, \"default\", \"/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/noisemachines/dev/pixel-matrix/documentation/components/BleepBloop.jsx"],"names":["React","PixelMatrix","toRgba","kawasePath","loadPixelMatrixFromPath","imagePath","loadImage","image","canvas","document","createElement","width","height","context","getContext","drawImage","fromCanvas","start","colorPalette","pixelMatrix","drawRandomColorAtPoint","point","pixel","getRandomPixel","set","putPixels","forEach","draw","getRandomPoint","setInterval"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,IAAsBC,MAAtB,QAAoC,yBAApC;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,IAAMC,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEVC,SAAS,CAACD,SAAD,CAFC;;AAAA;AAExBE,YAAAA,KAFwB;AAI9B;AACMC,YAAAA,MALwB,GAKfC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CALe;AAM9BF,YAAAA,MAAM,CAACG,KAAP,GAAeJ,KAAK,CAACI,KAArB;AACAH,YAAAA,MAAM,CAACI,MAAP,GAAgBL,KAAK,CAACK,MAAtB,CAP8B,CAS9B;;AACMC,YAAAA,OAVwB,GAUdL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAVc;AAW9BD,YAAAA,OAAO,CAACE,SAAR,CAAkBR,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAX8B,CAa9B;;AAb8B,6CAcvBN,WAAW,CAACe,UAAZ,CAAuBR,MAAvB,CAduB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBJ,uBAAuB;AAAA;AAAA;AAAA,GAA7B;;AAiBA,IAAMO,KAAK,GAAG,EAAd;AACA,IAAMC,MAAM,GAAG,EAAf;;AAEA,IAAMK,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAMT,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACPA,MADO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAGeJ,uBAAuB,CAACD,UAAD,CAHtC;;AAAA;AAGNe,YAAAA,YAHM;AAKNC,YAAAA,WALM,GAKQ,IAAIlB,WAAJ,CAAgBU,KAAhB,EAAuBC,MAAvB,CALR;;AAMNQ,YAAAA,sBANM,GAMmB,SAAzBA,sBAAyB,CAAAC,KAAK,EAAI;AACtC,kBAAMC,KAAK,GAAGJ,YAAY,CAACK,cAAb,EAAd;AACAJ,cAAAA,WAAW,CAACK,GAAZ,CAAgBH,KAAhB,EAAuBC,KAAvB;AACAH,cAAAA,WAAW,CAACM,SAAZ,CAAsBjB,MAAtB;AACD,aAVW;;AAWZW,YAAAA,WAAW,CAACO,OAAZ,CAAoB,UAACJ,KAAD,EAAQD,KAAR;AAAA,qBAAkBD,sBAAsB,CAACC,KAAD,CAAxC;AAAA,aAApB;;AACMM,YAAAA,IAZM,GAYC,SAAPA,IAAO,GAAM;AACjB,kBAAMN,KAAK,GAAGF,WAAW,CAACS,cAAZ,EAAd;AACAR,cAAAA,sBAAsB,CAACC,KAAD,CAAtB;AACD,aAfW;;AAgBZQ,YAAAA,WAAW,CAACF,IAAD,EAAO,EAAP,CAAX;;AAhBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAALV,KAAK;AAAA;AAAA;AAAA,GAAX;;eAmBe,oBAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C;;AAVD;;;;;;;;;;;;0BAvCMb,uB;0BAiBAO,K;0BACAC,M;0BAEAK,K","sourcesContent":["import React from 'react'\nimport PixelMatrix, { toRgba } from '../../built/PixelMatrix'\nimport kawasePath from '../kawase.jpg'\n\nconst loadPixelMatrixFromPath = async imagePath => {\n  // Load an image located at imagePath\n  const image = await loadImage(imagePath)\n\n  // Create a canvas element\n  const canvas = document.createElement('canvas')\n  canvas.width = image.width\n  canvas.height = image.height\n\n  // Draw the image to the canvas\n  const context = canvas.getContext('2d')\n  context.drawImage(image, 0, 0)\n\n  // Instantiate a PixelMatrix from the canvas\n  return PixelMatrix.fromCanvas(canvas)\n}\n\nconst width = 50\nconst height = 50\n\nconst start = async canvas => {\n  if (!canvas) return\n\n  const colorPalette = await loadPixelMatrixFromPath(kawasePath)\n\n  const pixelMatrix = new PixelMatrix(width, height)\n  const drawRandomColorAtPoint = point => {\n    const pixel = colorPalette.getRandomPixel()\n    pixelMatrix.set(point, pixel)\n    pixelMatrix.putPixels(canvas)\n  }\n  pixelMatrix.forEach((pixel, point) => drawRandomColorAtPoint(point))\n  const draw = () => {\n    const point = pixelMatrix.getRandomPoint()\n    drawRandomColorAtPoint(point)\n  }\n  setInterval(draw, 10)\n}\n\nexport default () => {\n  // return (\n  //   <canvas\n  //     style={{ width: '50%', height: '50%', imageRendering: 'pixelated' }}\n  //     width={width}\n  //     height={height}\n  //     ref={start}\n  //   />\n  // )\n  return <div>Hi</div>\n}\n"]}]}