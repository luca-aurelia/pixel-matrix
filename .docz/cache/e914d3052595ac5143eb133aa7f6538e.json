{"remainingRequest":"/Users/noisemachines/dev/pixel-matrix/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/noisemachines/dev/pixel-matrix/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/noisemachines/dev/pixel-matrix/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/noisemachines/dev/pixel-matrix/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/noisemachines/dev/pixel-matrix/documentation/components/LoadImage.js","dependencies":[{"path":"/Users/noisemachines/dev/pixel-matrix/documentation/components/LoadImage.js","mtime":1547761589963},{"path":"/Users/noisemachines/dev/pixel-matrix/node_modules/cache-loader/dist/cjs.js","mtime":1547744876783},{"path":"/Users/noisemachines/dev/pixel-matrix/node_modules/babel-loader/lib/index.js","mtime":1547744876677}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/noisemachines/dev/pixel-matrix/documentation/components/LoadImage.js\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport React from 'react';\nimport PixelMatrix from '../../built/PixelMatrix';\nimport exampleImageUrl from '../kawase.small.jpg';\n\nvar _default = function _default() {\n  var width = 250;\n  var height = 347; // Helper function. Returns a promise that resolves\n  // once the browser has loaded the image located at imageUrl.\n\n  var loadImage = function loadImage(imageUrl) {\n    return new Promise(function (resolve, reject) {\n      // Create a new image element.\n      var image = new Image(); // When the image loads, resolve the promise\n\n      var onLoad = function onLoad() {\n        resolve(image);\n      };\n\n      image.addEventListener('load', onLoad, false); // Start loading the image\n\n      image.src = imageUrl;\n    });\n  };\n\n  var draw =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(canvas) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (canvas) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              // Load the image located at exampleImageUrl.\n              loadImage(exampleImageUrl).then(function (image) {\n                // Create a canvas element\n                var imageCanvas = document.createElement('canvas');\n                imageCanvas.width = image.width;\n                imageCanvas.height = image.height; // Draw the image to the canvas\n\n                var context = imageCanvas.getContext('2d');\n                context.drawImage(image, 0, 0); // Instantiate a PixelMatrix from the canvas.\n                // This will copy the width, height, and pixels\n                // of the canvas into the pixel matrix.\n\n                var pixelMatrix = PixelMatrix.fromCanvas(imageCanvas); // Draw the image to our original canvas using pixel matrix.\n\n                pixelMatrix.putPixels(canvas);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function draw(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(\"canvas\", {\n    width: width,\n    height: height,\n    style: {\n      width: '50%',\n      height: '50%',\n      imageRendering: 'pixelated'\n    },\n    ref: draw,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  });\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/noisemachines/dev/pixel-matrix/documentation/components/LoadImage.js\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/noisemachines/dev/pixel-matrix/documentation/components/LoadImage.js"],"names":["React","PixelMatrix","exampleImageUrl","width","height","loadImage","imageUrl","Promise","resolve","reject","image","Image","onLoad","addEventListener","src","draw","canvas","then","imageCanvas","document","createElement","context","getContext","drawImage","pixelMatrix","fromCanvas","putPixels","imageRendering"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;;eACe,oBAAM;AACnB,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf,CAFmB,CAGnB;AACA;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ;AAAA,WACxB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACA,UAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd,CAF+B,CAI/B;;AACA,UAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnBJ,QAAAA,OAAO,CAACE,KAAD,CAAP;AACD,OAFD;;AAGAA,MAAAA,KAAK,CAACG,gBAAN,CAAuB,MAAvB,EAA+BD,MAA/B,EAAuC,KAAvC,EAR+B,CAU/B;;AACAF,MAAAA,KAAK,CAACI,GAAN,GAAYR,QAAZ;AACD,KAZD,CADwB;AAAA,GAA1B;;AAeA,MAAMS,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA,kBAENA,MAFM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGX;AACAX,cAAAA,SAAS,CAACH,eAAD,CAAT,CAA2Be,IAA3B,CAAgC,UAAAP,KAAK,EAAI;AACvC;AACA,oBAAMQ,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAApB;AACAF,gBAAAA,WAAW,CAACf,KAAZ,GAAoBO,KAAK,CAACP,KAA1B;AACAe,gBAAAA,WAAW,CAACd,MAAZ,GAAqBM,KAAK,CAACN,MAA3B,CAJuC,CAMvC;;AACA,oBAAMiB,OAAO,GAAGH,WAAW,CAACI,UAAZ,CAAuB,IAAvB,CAAhB;AACAD,gBAAAA,OAAO,CAACE,SAAR,CAAkBb,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EARuC,CAUvC;AACA;AACA;;AACA,oBAAMc,WAAW,GAAGvB,WAAW,CAACwB,UAAZ,CAAuBP,WAAvB,CAApB,CAbuC,CAevC;;AACAM,gBAAAA,WAAW,CAACE,SAAZ,CAAsBV,MAAtB;AACD,eAjBD;;AAJW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAJD,IAAI;AAAA;AAAA;AAAA,KAAV;;AAwBA,SACE;AACE,IAAA,KAAK,EAAEZ,KADT;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,KAAK,EAAE;AAAED,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,MAAM,EAAE,KAAxB;AAA+BuB,MAAAA,cAAc,EAAE;AAA/C,KAHT;AAIE,IAAA,GAAG,EAAEZ,IAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,C;;AArDD","sourcesContent":["import React from 'react'\nimport PixelMatrix from '../../built/PixelMatrix'\nimport exampleImageUrl from '../kawase.small.jpg'\nexport default () => {\n  const width = 250\n  const height = 347\n  // Helper function. Returns a promise that resolves\n  // once the browser has loaded the image located at imageUrl.\n\n  const loadImage = imageUrl =>\n    new Promise((resolve, reject) => {\n      // Create a new image element.\n      const image = new Image()\n\n      // When the image loads, resolve the promise\n      const onLoad = () => {\n        resolve(image)\n      }\n      image.addEventListener('load', onLoad, false)\n\n      // Start loading the image\n      image.src = imageUrl\n    })\n\n  const draw = async canvas => {\n    // Wait until we have a canvas to draw on.\n    if (!canvas) return\n    // Load the image located at exampleImageUrl.\n    loadImage(exampleImageUrl).then(image => {\n      // Create a canvas element\n      const imageCanvas = document.createElement('canvas')\n      imageCanvas.width = image.width\n      imageCanvas.height = image.height\n\n      // Draw the image to the canvas\n      const context = imageCanvas.getContext('2d')\n      context.drawImage(image, 0, 0)\n\n      // Instantiate a PixelMatrix from the canvas.\n      // This will copy the width, height, and pixels\n      // of the canvas into the pixel matrix.\n      const pixelMatrix = PixelMatrix.fromCanvas(imageCanvas)\n\n      // Draw the image to our original canvas using pixel matrix.\n      pixelMatrix.putPixels(canvas)\n    })\n  }\n\n  return (\n    <canvas\n      width={width}\n      height={height}\n      style={{ width: '50%', height: '50%', imageRendering: 'pixelated' }}\n      ref={draw}\n    />\n  )\n}\n"]}]}